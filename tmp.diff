Index: src/simutrans/builder/brueckenbauer.cc
===================================================================
--- src/simutrans/builder/brueckenbauer.cc	(revisión: 11217)
+++ src/simutrans/builder/brueckenbauer.cc	(copia de trabajo)
@@ -15,6 +15,7 @@
 #include "../obj/depot.h"
 #include "../player/simplay.h"
 #include "../simtypes.h"
+#include "../simachievements.h"
 
 #include "../ground/boden.h"
 #include "../ground/brueckenboden.h"
@@ -1053,6 +1054,7 @@
 		msg = from->kann_alle_obj_entfernen(player);
 
 		if(msg != NULL  ||  (from->get_halt().is_bound()  &&  from->get_halt()->get_owner()!=player)) {
+			simachievements_t::set_tool_ach(ACH_TOOL_REMOVE_BUSY_BRIDGE);
 			return "Die Bruecke ist nicht frei!\n";
 		}
 
Index: src/simutrans/simachenum.h
===================================================================
--- src/simutrans/simachenum.h	(revisión: 11218)
+++ src/simutrans/simachenum.h	(copia de trabajo)
@@ -1,10 +1,12 @@
 // IMPORTANT! CHANGE THIS ON NEW ACHIEVEMENTS ADDITION
-#define NUM_ACHIEVEMENTS 2
+#define NUM_ACHIEVEMENTS 4
 
 // Why a macro for this? Check steam/achievements.cc
 #define ACHIEVEMENTS     \
-	X(LOAD_PAK192_COMIC) \
-	X(QUERY_DICTACTOR)
+	X(ACH_LOAD_PAK192_COMIC) \
+	X(ACH_QUERY_DICTACTOR) \
+	X(ACH_PROD_INK) \
+	X(ACH_TOOL_REMOVE_BUSY_BRIDGE)
 
 
 #define X(id) id,
Index: src/simutrans/simachievements.cc
===================================================================
--- src/simutrans/simachievements.cc	(revisión: 11218)
+++ src/simutrans/simachievements.cc	(copia de trabajo)
@@ -2,6 +2,7 @@
 
 #include "./dataobj/environment.h"
 #include "./simdebug.h"
+#include "./simfab.h"
 #include "./utils/simstring.h"
 
 #ifdef STEAM_BUILT
@@ -9,17 +10,63 @@
 #endif
 
 void simachievements_t::check_pakset_ach() {
-	if (!STRICMP(env_t::pak_name.c_str(), "pak192.comic/")) {
-		set_achievement(LOAD_PAK192_COMIC);
+	std::string pak_name = env_t::pak_name;
+	pak_name.erase(pak_name.length() - 1);
+	if (STRICMP(env_t::pak_name.c_str(), "pak192.comic") == 0) {
+		set_achievement(ACH_LOAD_PAK192_COMIC);
 	}
 }
 
 void simachievements_t::check_query_ach(const char* object_name) {
-	if (!STRICMP(env_t::pak_name.c_str(), "pak128/") && strstr(object_name, "rmax_dictator_statue")) {
-		set_achievement(QUERY_DICTACTOR);
+	std::string pak_name = env_t::pak_name;
+	pak_name.erase(pak_name.length() - 1);
+	if (STRICMP(env_t::pak_name.c_str(), "pak128") == 0 && strstr(object_name, "rmax_dictator_statue")) {
+		set_achievement(ACH_QUERY_DICTACTOR);
 	}
 }
 
+void simachievements_t::set_tool_ach(simachievements_enum ach) {
+	switch (ach) {
+		case ACH_TOOL_REMOVE_BUSY_BRIDGE:
+			set_achievement(ACH_TOOL_REMOVE_BUSY_BRIDGE);
+		default:
+			return;
+	}
+}
+
+/**
+ * Given a factory and a name, checks if the factory has the given name
+ * If so, checks if the provided product meets the production target requirement (given as a percentage of maximum production)
+ * @returns true if the yearly production is greater than the target production
+ */
+bool check_yearly_production(fabrik_t* fab, const char* name, uint32 product_index, double target_percent = 0.70) {
+	if (strcmp(fab->get_name(), name) != 0 || product_index >= fab->get_output().get_count()) {
+		return false;
+	}
+	sint64 yearly_production = 0;
+	sint32 target_production = fab->get_current_production() * 12 * target_percent;
+	for (int i = 0; i < MAX_MONTH; i++) {
+		yearly_production += convert_goods(fab->get_output()[product_index].get_stats()[i * MAX_FAB_GOODS_STAT + FAB_GOODS_PRODUCED]);
+	}
+	// dbg->message("check_state_ach()", "TARGET PROD: %s", std::to_string(target_production).c_str());
+	// dbg->message("check_state_ach()", "PROD: %s", std::to_string(yearly_production).c_str());
+	return yearly_production >= target_production;
+}
+
+void simachievements_t::check_state_ach(karte_t* world) {
+	if (env_t::networkmode)
+		return;	 // We don't allow these kind of achievements in multiplayer games
+	std::string pak_name = env_t::pak_name;
+	pak_name.erase(pak_name.length() - 1);
+	for (fabrik_t* fab : world->get_fab_list()) {
+		if (STRICMP(pak_name.c_str(), "pak192.comic") == 0) {
+			if (check_yearly_production(fab, "squid", 0)) {
+				set_achievement(ACH_PROD_INK);
+			}
+		}
+	}
+}
+
 void simachievements_t::set_achievement(simachievements_enum ach) {
 	dbg->message("simachievements_t::set_achievement()", "Unlocking achievement %d", ach);
 #ifdef STEAM_BUILT
Index: src/simutrans/simachievements.h
===================================================================
--- src/simutrans/simachievements.h	(revisión: 11218)
+++ src/simutrans/simachievements.h	(copia de trabajo)
@@ -1,4 +1,5 @@
 #include "./simachenum.h"
+#include "./world/simworld.h"
 
 /**
  * Manages the achievement system. This currently only works for Steam achievements.
@@ -16,5 +17,12 @@
 	// Check achievements for querying a specific object
 	static void check_query_ach(const char* object_name);
 
+	// Check achievements that depend on game state
+	static void check_state_ach(karte_t* world);
+
+	// Set the achievement for executing a tool under specific circunstances
+	// No check is made, but instead it is limited to some achievements only
+	static void set_tool_ach(simachievements_enum ach);
+
 	// TODO: A function to set achievement from script tools (for scenarios, tutorial, etc...)
 };
\ No newline at end of file
Index: src/simutrans/world/simworld.cc
===================================================================
--- src/simutrans/world/simworld.cc	(revisión: 11218)
+++ src/simutrans/world/simworld.cc	(copia de trabajo)
@@ -38,6 +38,7 @@
 #include "../gui/simwin.h"
 #include "simworld.h"
 #include "../sys/simsys.h"
+#include "../simachievements.h"
 
 #include "../tpl/vector_tpl.h"
 #include "../tpl/binary_heap_tpl.h"
@@ -6133,6 +6134,7 @@
 #ifdef STEAM_BUILT
 			steam_t::get_instance()->update_ui(get_last_year(), convoys().get_count());
 #endif
+			simachievements_t::check_state_ach(this);
 			next_misc_time = time + 5000; // every 5s
 		}
 
