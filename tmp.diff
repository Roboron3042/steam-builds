Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revisi贸n: 11214)
+++ CMakeLists.txt	(copia de trabajo)
@@ -255,9 +255,9 @@
 		set_target_properties(steam PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/osx/libsteam_api.dylib)
 	elseif(UNIX)
 		set_target_properties(steam PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/linux64/libsteam_api.so)
-	elseif(MAKE_GENERATOR_PLATFORM MATCHES "Win32")
+	elseif(MSVC AND CMAKE_GENERATOR_PLATFORM MATCHES "x64")
 		set_target_properties(steam PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/win64/steam_api64.dll)
-	else()
+	else(MSVC AND CMAKE_GENERATOR_PLATFORM MATCHES "Win32")
 		set_target_properties(steam PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/steam_api.dll)
 	endif()
 	target_include_directories(simutrans PRIVATE ${CMAKE_SOURCE_DIR}/sdk/public/steam)
Index: cmake/MacBundle.cmake
===================================================================
--- cmake/MacBundle.cmake	(revisi贸n: 11199)
+++ cmake/MacBundle.cmake	(copia de trabajo)
@@ -28,6 +28,10 @@
 # Change the install directory from /usr/local to the build directory, so it's easier to package.
 set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR})
 
+if (SIMUTRANS_STEAM_BUILT)
+	install(FILES ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/osx/libsteam_api.dylib DESTINATION ${CMAKE_BINARY_DIR}/simutrans/simutrans.app/Contents/MacOS)
+endif ()
+
 install(CODE "
 	include(BundleUtilities)
 	fixup_bundle(\"${CMAKE_BINARY_DIR}/simutrans/simutrans.app\" \"\" \"\") 
Index: cmake/SimutransInstall.cmake
===================================================================
--- cmake/SimutransInstall.cmake	(revisi贸n: 11213)
+++ cmake/SimutransInstall.cmake	(copia de trabajo)
@@ -114,3 +114,16 @@
 				FOLLOW_SYMLINK_CHAIN)
 	]])
 endif ()
+
+#
+# Include steam library (for some reason it is not done automagically as others)
+#
+if (SIMUTRANS_STEAM_BUILT)
+	if(MSVC AND CMAKE_GENERATOR_PLATFORM MATCHES "Win32")
+		install(FILES  ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/steam_api.dll DESTINATION ${CMAKE_BINARY_DIR}/simutrans/steam_api.dll)
+	elseif(MSVC AND CMAKE_GENERATOR_PLATFORM MATCHES "x64")
+		install(FILES  ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/win64/steam_api64.dll DESTINATION ${CMAKE_BINARY_DIR}/simutrans/steam_api64.dll)
+	elseif(UNIX AND NOT APPLE) # For Apple it was already done in MacBundle.cmake
+		install(FILES  ${CMAKE_SOURCE_DIR}/sdk/redistributable_bin/linux64/libsteam_api.so DESTINATION ${CMAKE_BINARY_DIR}/simutrans/lib/libsteam_api.so)
+	endif()
+endif()
\ No newline at end of file
Index: src/steam/steam.cc
===================================================================
--- src/steam/steam.cc	(revisi贸n: 11213)
+++ src/steam/steam.cc	(copia de trabajo)
@@ -17,8 +17,8 @@
 #include "isteamutils.h"
 #include "steam_api.h"
 
-int MAX_WORKSHOP_ITEMS = 1000;	// API fetch limit
-int MAX_TAG_LENGTH = 100;
+#define MAX_WORKSHOP_ITEMS 1000	// API fetch limit
+#define MAX_TAG_LENGTH 100
 
 steam_t* steam_t::steam = nullptr;
 
@@ -55,7 +55,7 @@
 
 	int num_subscribed_items = SteamUGC()->GetNumSubscribedItems();
 
-	PublishedFileId_t subscribed_items[num_subscribed_items];
+	PublishedFileId_t subscribed_items[MAX_WORKSHOP_ITEMS];
 	SteamUGC()->GetSubscribedItems(subscribed_items, num_subscribed_items);
 
 	existing_items = steam_t::uninstall_old_items(previously_installed_items, subscribed_items, num_subscribed_items);
@@ -84,7 +84,7 @@
 	std::vector<workshop_item_t> installed_items;
 	if (!failure && callback->m_eResult == 1) {
 		int num_results = callback->m_unNumResultsReturned;
-		int num_tags_vector[num_results];
+		int num_tags_vector[MAX_WORKSHOP_ITEMS];
 
 		for (int result_index = 0; result_index < num_results; result_index++) {
 			num_tags_vector[result_index] = SteamUGC()->GetQueryUGCNumTags(callback->m_handle, result_index);
